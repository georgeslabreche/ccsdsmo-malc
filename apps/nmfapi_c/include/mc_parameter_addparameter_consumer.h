/*  =========================================================================
    mc_parameter_addparameter_consumer - The request consumer for the addParameter operation
    The addParameter operation allows a consumer to define one or more parameters that do not currently exist

    The MIT License (MIT)
    =========================================================================
*/

#ifndef MC_PARAMETER_ADDPARAMETER_CONSUMER_H_INCLUDED
#define MC_PARAMETER_ADDPARAMETER_CONSUMER_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/mc_parameter_addparameter_consumer.api" to make changes.
//  @interface
//  This is a stable class, and may not change except for emergencies. It
//  is provided in stable builds.

// The consumer URI for the addParameter operation
#define MC_PARAMETER_ADDPARAMETER_CONSUMER_URI "mc/parameter/consumer/addParameter"

//  Instanciate a consumer object for the addParameter operation
NMFAPI_C_EXPORT mc_parameter_addparameter_consumer_t *
    mc_parameter_addparameter_consumer_new (mal_ctx_t *mal_ctx, mal_uri_t *provider_uri);

//  The destructor
NMFAPI_C_EXPORT void
    mc_parameter_addparameter_consumer_destroy (mc_parameter_addparameter_consumer_t **self_p);

//  Clear the response variables
NMFAPI_C_EXPORT void
    mc_parameter_addparameter_consumer_response_clear (mc_parameter_addparameter_consumer_t *self);

//  Lock the mutex
//  A mutex is used to force a synchronous response despite the request being an asynchronous operation
NMFAPI_C_EXPORT void
    mc_parameter_addparameter_consumer_mutex_lock (mc_parameter_addparameter_consumer_t *self);

//  Unlock the mutex
//  A mutex is used to force a synchronous response despite the request being an asynchronous operation
NMFAPI_C_EXPORT void
    mc_parameter_addparameter_consumer_mutex_unlock (mc_parameter_addparameter_consumer_t *self);

//  Create and initialize the actor
NMFAPI_C_EXPORT void
    mc_parameter_addparameter_consumer_actor_init (mc_parameter_addparameter_consumer_t *self);

//  Get error code from processing the response
NMFAPI_C_EXPORT int
    mc_parameter_addparameter_consumer_get_response_error_code (mc_parameter_addparameter_consumer_t *self);

//  Get the identity id list of the created parameters
NMFAPI_C_EXPORT int64_t *
    mc_parameter_addparameter_consumer_get_response_param_identity_id_list (mc_parameter_addparameter_consumer_t *self);

//  Get the definition id list of the created parameters
NMFAPI_C_EXPORT int64_t *
    mc_parameter_addparameter_consumer_get_response_param_definition_id_list (mc_parameter_addparameter_consumer_t *self);

//  Get response variable for number of elements
NMFAPI_C_EXPORT unsigned int
    mc_parameter_addparameter_consumer_get_response_element_count (mc_parameter_addparameter_consumer_t *self);

//  Get the param names MAL message field
NMFAPI_C_EXPORT char **
    mc_parameter_addparameter_consumer_get_field_param_name_list (mc_parameter_addparameter_consumer_t *self);

//  Set the param names MAL message field
NMFAPI_C_EXPORT void
    mc_parameter_addparameter_consumer_set_field_param_name_list (mc_parameter_addparameter_consumer_t *self, char **param_name_list);

//  Get the param descriptions MAL message field
NMFAPI_C_EXPORT char **
    mc_parameter_addparameter_consumer_get_field_param_description_list (mc_parameter_addparameter_consumer_t *self);

//  Set the param descriptions MAL message field
NMFAPI_C_EXPORT void
    mc_parameter_addparameter_consumer_set_field_param_description_list (mc_parameter_addparameter_consumer_t *self, char **param_description_list);

//  Get the param raw types MAL message field
NMFAPI_C_EXPORT unsigned char*
    mc_parameter_addparameter_consumer_get_field_param_raw_type_list (mc_parameter_addparameter_consumer_t *self);

//  Set the param raw types MAL message field
NMFAPI_C_EXPORT void
    mc_parameter_addparameter_consumer_set_field_param_raw_type_list (mc_parameter_addparameter_consumer_t *self, unsigned char *param_raw_type_list);

//  Get the param raw units MAL message field
NMFAPI_C_EXPORT char **
    mc_parameter_addparameter_consumer_get_field_param_raw_unit_list (mc_parameter_addparameter_consumer_t *self);

//  Set the param raw units MAL message field
NMFAPI_C_EXPORT void
    mc_parameter_addparameter_consumer_set_field_param_raw_unit_list (mc_parameter_addparameter_consumer_t *self, char **param_raw_unit_list);

//  Get the param generation enabled MAL message field
NMFAPI_C_EXPORT bool *
    mc_parameter_addparameter_consumer_get_field_param_generation_enabled_list (mc_parameter_addparameter_consumer_t *self);

//  Set the param generation enabled MAL message field
NMFAPI_C_EXPORT void
    mc_parameter_addparameter_consumer_set_field_param_generation_enabled_list (mc_parameter_addparameter_consumer_t *self, bool *param_generation_enabled_list);

//  Get the param report interval MAL message field
NMFAPI_C_EXPORT double *
    mc_parameter_addparameter_consumer_get_field_param_report_interval_list (mc_parameter_addparameter_consumer_t *self);

//  Set the param report interval MAL message field
NMFAPI_C_EXPORT void
    mc_parameter_addparameter_consumer_set_field_param_report_interval_list (mc_parameter_addparameter_consumer_t *self, double *param_report_interval_list);

//  Get the number of params MAL message field
NMFAPI_C_EXPORT unsigned int
    mc_parameter_addparameter_consumer_get_field_param_list_size (mc_parameter_addparameter_consumer_t *self);

//  Set the number of params MAL message field
NMFAPI_C_EXPORT void
    mc_parameter_addparameter_consumer_set_field_param_list_size (mc_parameter_addparameter_consumer_t *self, unsigned int param_list_size);

//  @end

#ifdef __cplusplus
}
#endif

#endif
