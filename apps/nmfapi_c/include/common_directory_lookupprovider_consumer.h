/*  =========================================================================
    common_directory_lookupprovider_consumer - The request consumer for the lookupProvider operation

    The MIT License (MIT)
    =========================================================================
*/

#ifndef COMMON_DIRECTORY_LOOKUPPROVIDER_CONSUMER_H_INCLUDED
#define COMMON_DIRECTORY_LOOKUPPROVIDER_CONSUMER_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/common_directory_lookupprovider_consumer.api" to make changes.
//  @interface
//  This is a draft class, and may change without notice. It is disabled in
//  stable builds by default. If you use this in applications, please ask
//  for it to be pushed to stable state. Use --enable-drafts to enable.
#ifdef NMFAPI_C_BUILD_DRAFT_API

// The consumer URI for the lookupProvider operation
#define COMMON_DIRECTORY_LOOKUPPROVIDER_CONSUMER_URI "common/directory/consumer/lookupProvider"

//  *** Draft method, for development use, may change without warning ***
//  Instanciate a consumer object for the lookupProvider operation
NMFAPI_C_EXPORT common_directory_lookupprovider_consumer_t *
    common_directory_lookupprovider_consumer_new (mal_ctx_t *mal_ctx, mal_uri_t *provider_uri);

//  *** Draft method, for development use, may change without warning ***
//  The destructor
NMFAPI_C_EXPORT void
    common_directory_lookupprovider_consumer_destroy (common_directory_lookupprovider_consumer_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Lock the mutex
//  A mutex is used to force a synchronous response despite the request being an asynchronous operation
NMFAPI_C_EXPORT void
    common_directory_lookupprovider_consumer_mutex_lock (common_directory_lookupprovider_consumer_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Unlock the mutex
//  A mutex is used to force a synchronous response despite the request being an asynchronous operation
NMFAPI_C_EXPORT void
    common_directory_lookupprovider_consumer_mutex_unlock (common_directory_lookupprovider_consumer_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Create and initialize the actor
NMFAPI_C_EXPORT void
    common_directory_lookupprovider_consumer_actor_init (common_directory_lookupprovider_consumer_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get response variable for the provider summary
NMFAPI_C_EXPORT common_directory_providersummary_list_t *
    common_directory_lookupprovider_consumer_get_response_provider_summary_list (common_directory_lookupprovider_consumer_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get error code from processing the response
NMFAPI_C_EXPORT int
    common_directory_lookupprovider_consumer_get_response_error_code (common_directory_lookupprovider_consumer_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Get the service filter MAL message field
NMFAPI_C_EXPORT common_directory_servicefilter_t *
    common_directory_lookupprovider_consumer_get_field_service_filter (common_directory_lookupprovider_consumer_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Set the service filter MAL message field
NMFAPI_C_EXPORT void
    common_directory_lookupprovider_consumer_set_field_service_filter (common_directory_lookupprovider_consumer_t *self, common_directory_servicefilter_t *service_filter);

#endif // NMFAPI_C_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
