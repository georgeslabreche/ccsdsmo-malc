<!-- 
    The project.xml generates build environments for:

        * android
        * autotool
        * cmake
        * mingw32
        * cygwin
        * vs2008
        * vs2010
        * vs2012
        * vs2013

    Classes are automatically added to all build environments. Further as you
    add new classes to your project you can generate skeleton header and source 
    files according to http://rfc.zeromq.org/spec:21.
-->
<project
    name = "nmfapi_c_demo"
    description = "Demonstrations on how to interact with the MAL-C NMF API"
    script = "zproject.gsl"
    email = "georges@tanagraspace.com"
    >

    <!--
        Includes are processed first, so XML in included files will be
        part of the XML tree
    -->
    <include filename = "license.xml" />

    <!-- 
        Current version of your project. 
        This will be used to package your distribution 
    -->
    <version major = "1" minor = "0" patch = "0" />

    <!--
        Current libtool ABI version of the  project's shared library.
        
        For details on how/when to increment it, see:
        http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
        
        If not defined 0:0:0 will be used.
    -->
    <abi current = "1" revision = "0" age = "0" />

    <!--
        Specify which other projects this depends on.
        These projects must be known by zproject, and the list of
        known projects is maintained in the zproject_known_projects.xml model.
        You need not specify subdependencies if they are implied. -->
    <use project = "czmq" />
    <use project = "malutil" />
    <use project = "malattributes" />
    <use project = "mal" />
    <use project = "malbinary" />
    <use project = "malsplitbinary" />
    <use project = "malzmq" />
    <use project = "maltcp" />
    <use project = "malactor" />
    <use project = "generated_areas" />
    <use project = "nmfapi_c"/>

    <!-- Header Files
         name := The name the header file to include without file ending
    <header name = "myproject_prelude" />
    -->

    <!-- 
        Classes, if the class header or source file doesn't exist this will
        generate a skeletons for them.
        use private = "1" for internal classes
    <class name = "myclass">Public class description</class>
    <class name = "someother" private = "1">Private class description</class>
    -->

    <!-- 
        Need at least one class generated to workaround a bug in which
        the _classes.h header is not generated, i.e. nmfapi_c_demo_classes.h
        Make it a utils class and at worst leave it "blank".
        In the end we implemented a utils class for setValue so we didn't need this...
    -->
    <class name = "demo_app_utils" selftest = "0">
        Dummy class to workaround a bug
    </class>

    <!--
        Make sure all main program binaries are prefixed with the project name.
        If they are not properly prefixed then they won't be packaged for
        deployment by the deployment scripts 
    -->
    <!-- A demo app -->
    <main name = "demo_app">Demo App</main>

    <!-- A demo app for getValue -->
    <main name = "demo_getvalue">Demo the getValue interaction provided by the Monitor and Control Parameter Service</main>

    <!-- A demo app for setValue -->
    <class name = "demo_setvalue_utils" selftest = "0">A utils class for the setValue demo app</class>
    <main name = "demo_setvalue">Demo the setValue interaction provided by the Monitor and Control Parameter Service</main>

    <!-- a demo app for addParameter -->
    <main name = "demo_addparameter">Demo the addParameter interaction provided by the Monitor and Control Parameter Service</main>

    <!-- Targets -->
    <target name = "rpi" />

</project>
